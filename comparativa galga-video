import cv2
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.integrate import cumtrapz

fps = 75000  
scale_px_per_mm = 19.6  
video_path = 'Prueba_2y5Vrecortado.mp4'


cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    print("No se pudo abrir el video.")
    cap.release()
    exit()

ret, reference_frame = cap.read()
if not ret:
    print("No se pudo leer el primer fotograma.")
    cap.release()
    exit()

def detect_aruco_positions(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)
    aruco_params = cv2.aruco.DetectorParameters()
    corners, ids, _ = cv2.aruco.detectMarkers(gray, aruco_dict, parameters=aruco_params)
    aruco_positions = {}
    if ids is not None:
        for i in range(len(ids)):
            if ids[i][0] == 4:  
                continue
            aruco_positions[ids[i][0]] = corners[i][0]
    return aruco_positions

reference_positions = detect_aruco_positions(reference_frame)
movements = []

frame_idx = 0
while True:
    ret, frame = cap.read()
    if not ret:
        break

    current_positions = detect_aruco_positions(frame)
    frame_data = {'frame': frame_idx}

    for aruco_id, ref_pos in reference_positions.items():
        if aruco_id in current_positions:
            cur_pos = current_positions[aruco_id]
            diff_px = np.linalg.norm(cur_pos - ref_pos)
            diff_mm = diff_px / scale_px_per_mm
            frame_data[aruco_id] = diff_mm
        else:
            frame_data[aruco_id] = None

    movements.append(frame_data)
    frame_idx += 1

cap.release()

data_video = pd.DataFrame(movements)
data_video['Time_s'] = data_video['frame'] / fps

start_time_video = 0.003  
data_video_sync = data_video[(data_video['Time_s'] >= start_time_video) & (data_video['Time_s'] <= start_time_video + 0.003)]

file_path = 'Prueba2y5V_0000.txt'

try:
    data_galgas = pd.read_csv(file_path, encoding="ISO-8859-1", delimiter=';', header=0)
    data_galgas = data_galgas.loc[:, ~data_galgas.columns.str.contains('^Unnamed')]
    data_galgas.columns = ['Time_s', 'Incidente_um_m', 'Transmitida_um_m', 'DI_6']

    data_galgas['Incidente_desplazamiento_mm'] = cumtrapz(data_galgas['Incidente_um_m'], data_galgas['Time_s'], initial=0) / 1000
    data_galgas['Transmitida_desplazamiento_mm'] = cumtrapz(data_galgas['Transmitida_um_m'], data_galgas['Time_s'], initial=0) / 1000


    data_galgas_sync = data_galgas[(data_galgas['Time_s'] >= 0.0117) & (data_galgas['Time_s'] <= 0.0125)].copy()
    data_galgas_sync['Time_s_scaled'] = (data_galgas_sync['Time_s'] - 0.0119) * 10 + 0.003

    displacement_video_range = data_video_sync.iloc[:, 1:].max().max() - data_video_sync.iloc[:, 1:].min().min()
    displacement_galgas_range = data_galgas_sync['Incidente_desplazamiento_mm'].max() - data_galgas_sync['Incidente_desplazamiento_mm'].min()
    displacement_scaling_factor = displacement_video_range / displacement_galgas_range
    data_galgas_sync['Incidente_desplazamiento_mm_scaled'] = data_galgas_sync['Incidente_desplazamiento_mm'] * displacement_scaling_factor
    data_galgas_sync['Transmitida_desplazamiento_mm_scaled'] = data_galgas_sync['Transmitida_desplazamiento_mm'] * displacement_scaling_factor

    data_galgas_sync['Incidente_desplazamiento_mm_scaled'] *= -1
    data_galgas_sync['Transmitida_desplazamiento_mm_scaled'] *= -1

    plt.figure(figsize=(14, 10))

    plt.subplot(3, 1, 1)
    plt.plot(data_galgas['Time_s'], data_galgas['Incidente_desplazamiento_mm'], label='Incidente Desplazamiento (Original)')
    plt.plot(data_galgas['Time_s'], data_galgas['Transmitida_desplazamiento_mm'], label='Transmitida Desplazamiento (Original)')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Desplazamiento (mm)')
    plt.legend()
    plt.title('Desplazamiento de las Galgas (Original)')
    plt.grid(True)
    plt.xlim(0.0110, 0.0150) 

    plt.subplot(3, 1, 2)
    for aruco_id in reference_positions.keys():
        if aruco_id != 4:
            plt.plot(data_video['Time_s'], data_video[aruco_id], label=f'Aruco {aruco_id} (Original)')

    plt.xlabel('Tiempo (s)')
    plt.ylabel('Desplazamiento (mm)')
    plt.legend()
    plt.title('Desplazamiento del Video (Original)')
    plt.grid(True)

    plt.subplot(3, 1, 3)
    plt.plot(data_galgas_sync['Time_s_scaled'], data_galgas_sync['Incidente_desplazamiento_mm_scaled'], label='Incidente Desplazamiento (Galgas Escalado)')
    plt.plot(data_galgas_sync['Time_s_scaled'], data_galgas_sync['Transmitida_desplazamiento_mm_scaled'], label='Transmitida Desplazamiento (Galgas Escalado)')
    for aruco_id in reference_positions.keys():
        if aruco_id != 4:
            plt.plot(data_video_sync['Time_s'], data_video_sync[aruco_id], label=f'Aruco {aruco_id} (Video)', linestyle='--')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Desplazamiento (mm)')
    plt.legend()
    plt.title('Comparación de Desplazamientos (Galgas vs Video, Escalado y Sincronizado)')
    plt.grid(True)

    plt.tight_layout()
    plt.show()

except FileNotFoundError:
    print(f"El archivo {file_path} no se encontró.")
except pd.errors.ParserError as e:
    print(f"Error al analizar el archivo CSV: {e}")
except ValueError as ve:
    print(f"Error de longitud de columnas: {ve}")
