import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from tkinter import Toplevel
from PIL import Image, ImageTk
import cv2
import os

class VideoAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Tracker de ArUcos")
        self.root.geometry("500x400")

        self.video_path = None
        self.result_image_path = None
        self.aruco_size_mm = None
        self.mm_to_pixels_scale = None

        self.set_theme()
        self.create_widgets()

    def set_theme(self):
        self.bg_color = "#5a1e2d"  # Rojo vino oscuro
        self.fg_color = "white"
        self.root.configure(bg=self.bg_color)

    def create_widgets(self):
        self.label = tk.Label(self.root, text="Selecciona un archivo de video", bg=self.bg_color, fg=self.fg_color)
        self.label.pack(pady=20)

        self.select_button = tk.Button(self.root, text="Seleccionar Video", command=self.select_file, bg=self.bg_color, fg=self.fg_color)
        self.select_button.pack(pady=20)

        self.size_button = tk.Button(self.root, text="Especificar Tamaño ArUco", command=self.specify_aruco_size, bg=self.bg_color, fg=self.fg_color)
        self.size_button.pack(pady=20)

        self.scale_button = tk.Button(self.root, text="Especificar Escala (mm/píxeles)", command=self.specify_mm_to_pixels_scale, bg=self.bg_color, fg=self.fg_color)
        self.scale_button.pack(pady=20)

        self.start_button = tk.Button(self.root, text="Iniciar Análisis", command=self.start_analysis, state=tk.DISABLED, bg=self.bg_color, fg=self.fg_color)
        self.start_button.pack(pady=20)

        self.image_label = tk.Label(self.root, bg=self.bg_color)
        self.image_label.pack(pady=20)

    def specify_aruco_size(self):
        size = simpledialog.askfloat("Tamaño ArUco", "Especifica el tamaño real del marcador ArUco en milímetros:", minvalue=0.1)
        if size:
            self.aruco_size_mm = size
            messagebox.showinfo("Tamaño ArUco", f"Tamaño especificado: {self.aruco_size_mm} mm")
            self.check_ready_to_analyze()

    def specify_mm_to_pixels_scale(self):
        scale = simpledialog.askfloat("Escala mm/píxeles", "Especifica la escala de milímetros a píxeles:", minvalue=0.01)
        if scale:
            self.mm_to_pixels_scale = scale
            messagebox.showinfo("Escala mm/píxeles", f"Escala especificada: {self.mm_to_pixels_scale} mm/píxeles")
            self.check_ready_to_analyze()

    def check_ready_to_analyze(self):
        if self.aruco_size_mm and self.mm_to_pixels_scale and self.video_path:
            self.start_button.config(state=tk.NORMAL)

    def select_file(self):
        self.video_path = filedialog.askopenfilename(filetypes=[("Video Files", "*.mp4")])
        if self.video_path:
            messagebox.showinfo("Archivo Seleccionado", f"Archivo: {self.video_path}")
            self.check_ready_to_analyze()

    def start_analysis(self):
        if not self.aruco_size_mm:
            messagebox.showwarning("Falta Tamaño ArUco", "Por favor, especifica el tamaño real del ArUco antes de iniciar el análisis.")
            return

        if not self.mm_to_pixels_scale:
            messagebox.showwarning("Falta Escala", "Por favor, especifica la escala de milímetros a píxeles antes de iniciar el análisis.")
            return

        self.show_loading_screen()
        self.root.update()  # Actualizar la interfaz para mostrar la pantalla de carga

        try:
            self.result_image_path = self.process_video(self.video_path)
            if self.result_image_path and os.path.exists(self.result_image_path):
                self.show_result_image()
                messagebox.showinfo("Éxito", f"Análisis completado. Imagen guardada en: {self.result_image_path}")
            else:
                messagebox.showerror("Error", "No se pudo generar la imagen resultante.")
        except Exception as e:
            messagebox.showerror("Error durante el análisis", str(e))
        finally:
            self.hide_loading_screen()

    def process_video(self, video_path):
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            raise RuntimeError("Error al abrir el video")

        ret, frame = cap.read()
        cap.release()

        if ret:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            result_image_path = "result_image.jpg"
            cv2.imwrite(result_image_path, gray)  # Guardar el frame en escala de grises directamente con OpenCV
            return result_image_path
        else:
            raise RuntimeError("No se pudo leer el video")

    def show_loading_screen(self):
        self.loading_window = Toplevel(self.root)
        self.loading_window.title("Cargando")
        self.loading_window.geometry("200x100")
        self.loading_label = tk.Label(self.loading_window, text="Procesando, por favor espere...", bg=self.bg_color, fg=self.fg_color)
        self.loading_label.pack(pady=20)
        self.loading_window.configure(bg=self.bg_color)
        self.loading_window.transient(self.root)
        self.loading_window.grab_set()

    def hide_loading_screen(self):
        if hasattr(self, 'loading_window'):
            self.loading_window.destroy()

    def show_result_image(self):
        image = Image.open(self.result_image_path)
        image.thumbnail((400, 400))  # Ajustar el tamaño de la imagen a 400x400 píxeles
        photo = ImageTk.PhotoImage(image)

        self.image_label.config(image=photo)
        self.image_label.image = photo  # Mantener una referencia a la imagen

if __name__ == "__main__":
    root = tk.Tk()
    app = VideoAnalyzerApp(root)
    root.mainloop()
