import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk  # Asegúrate de tener instalada la biblioteca Pillow (PIL)

class VideoToImageConverterApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Progama de Ricardo")

        # Variables
        self.video_file = None
        self.result_image = None

        # Main Frame
        self.main_frame = tk.Frame(self.root, padx=20, pady=20)
        self.main_frame.pack()

        # Drag and Drop Label
        self.drag_drop_label = tk.Label(self.main_frame, text="Arrastra aquí el archivo de video (.mp4)")
        self.drag_drop_label.pack(pady=20)

        # File Selection Button
        self.select_button = tk.Button(self.main_frame, text="Seleccionar archivo", command=self.select_file)
        self.select_button.pack()

        # Convert Button
        self.convert_button = tk.Button(self.main_frame, text="Convertir", command=self.convert_video)
        self.convert_button.pack(pady=20)

        # Loading Screen
        self.loading_label = tk.Label(self.main_frame, text="Cargando...", font=('Helvetica', 16))
        self.loading_image = ImageTk.PhotoImage(Image.open('loading.gif'))
        self.loading_label_image = tk.Label(self.main_frame, image=self.loading_image)

        # Result Image Display
        self.result_label = tk.Label(self.main_frame)
        self.result_label.pack(pady=20)

    def select_file(self):
        self.video_file = filedialog.askopenfilename(filetypes=[("Video Files", "*.mp4")])
        if self.video_file:
            self.drag_drop_label.config(text=f"Archivo seleccionado: {self.video_file}")

    def convert_video(self):
        if self.video_file:
            # Simulate loading
            self.loading_label.pack(pady=20)
            self.loading_label_image.pack(pady=20)
            self.root.update()

            # Replace this with actual video to image conversion logic
            # For demonstration, let's assume we load a sample image
            self.result_image = Image.open('sample_image.jpg')
            self.result_image = ImageTk.PhotoImage(self.result_image)
            self.result_label.config(image=self.result_image)
            self.result_label.image = self.result_image

            # Remove loading screen after conversion (simulated delay)
            self.loading_label.pack_forget()
            self.loading_label_image.pack_forget()

if _name_ == "_main_":
    root = tk.Tk()
    app = Programa de Ricardo(root)
    root.mainloop()
